
### 检索数据
```sql
SELECT id, name, price
FROM Product;  --检索指定列

SELECT * 
FROM Product;  --通配符（*）检索表中所有列

SELECT DISTINCT id 
FROM Products;  --检索不重复的id行

SELECT DISTINCT id, name
FROM Products;  --检索（id，name）不重复的组合

SELECT id, name
FROM Products
LIMIT 5;        --LIMIT输出前5行

SELECT id, name
FROM Products
LIMIT 5 OFFSET 4;  --返回从第4行起的5行数据
                   --LIMIT 4,5 == LIMIT 5 OFFSET 4
```
### 排序数据
ORDER BY 子句放在 SELECT 子句的最后一句
```sql
SELECT id, name, price
FROM Product
ORDER BY id ;    --ORDER BY 子句必须在 SELECT 语句中的最后一句
                 --DESC 为降序，默认为升序

SELECT id, name, price
FROM Product
ORDER BY id ASC, price DESC;    --首先对 id 进行升序排列
                                --接着对 price 进行降序排列
```
### 过滤数据
WHERE 子句在 FROM 子句之后给出
```sql
SELECT id, name, price
FROM Products
WHERE price = 3.14;     --只返回 price 值为3.14的行
```
 WHERE 子句操作符

| 操作符   | 说明         | 操作符   | 说明               |
|----------|--------------|----------|--------------------|
| =        | 等于         | >        | 大于               |
| <>       | 不等于       | >=       | 大于等于           |
| !=       | 不等于       | !>       | 不大于             |
| <        | 小于         | BETWEEN  | 在指定的两个值之间 |
| <=       | 小于等于     | IS NULL  | 为 NULL 值         |
| !<       | 不小于       |          |                    |

```sql
SELECT id, name
FROM Products
WHERE id != 'sargan';   --使用单引号来限定字符串类型

SELECT id, price
FROM Products
WHERE price BETWEEN 3 AND 5;    --使用 BETWEEN 必须指定两个值，并且用 AND 关键字分隔

SELECT id, price
FROM Products
WHERE price IS NULL;    --NULL 无值（no value），与字段包含 0、空字符串或仅仅包含空格不同
                        --过滤选择不包含指定值的所有行时，不会返回含 NULL 值的行
```
### 高级数据过滤
AND 操作符
```sql
SELECT id, name, price
FROM Products
WHERE id = 'k0002' AND price <> 4;
```
OR 操作符
```sql
SELECT id, name, price
FROM Products
WHERE id = 'k0002' OR id = 'k0003';   --AND 优先级高于 OR 
```
IN 操作符
```sql
SELECT id, name
FROM Products
WHERE id IN ('K001','K002')
ORDER BY id;      --IN 操作符用来指定条件范围，范围中的每个条件都可以进行匹配
                  --IN 取一组由逗号分隔、括在圆括号中的合法值
                  --WHERE 子句中用来指定要匹配值的清单的关键字，功能与 OR 相当
```
NOT 操作符
```sql
SELECT id, name
FROM Products
WHERE NOT id = 'k001'
ORDER BY id;       --WHERE 子句中用来否定其后条件的关键字
                   --NOT 关键字可以用在要过滤的列前，而不仅是在其后
```
### 用通配符进行过滤

LIKE 操作符
```sql
SELECT id, name
FROM Products
WHERE name LIKE 'fish%';    --% 通配符
                            --存储的文本为 Fish bean bag toy(后面附加33个字符)，使用'F%y%'
                            --'%' 无法匹配值为 NULL 的行
```
下划线 _ 通配符
```sql
SELECT id, name
FROM Products
WHERE name LIKE '__sh';    -- _ 总是刚好匹配一个字符，不能多也不能少
```
- 尽量不要将通配符用于搜索模式的开头。将通配符置于开始处，搜索起来是最慢的

### 创建计算字段
拼接字段
```sql
SELECT name + '(' + city + ')'
FROM vendors
ORDER BY name;      --使用 + 进行拼接

SELECT Concat(name,'(', city,')')
FROM vendors
ORDER BY name;      --Concat()

SELECT RTRIM(name) + '(' + RTRIM(city) +')'
FROM vendors
ORDER BY name;      --RTRIM() 函数去掉值右边的所有空格
                    --LTRIM() 函数去掉值左边的所有空格
                    --TRIM()  函数去掉值两边的所有空格
```
使用别名
```sql
SELECT RTRIM(name) + '(' + RTRIM(city) +')' AS vend_title
FROM vendors
ORDER BY name;      --AS 用作别名
```
执行算术计算
```sql
SELECT id, quantity, price,
       quantity * price AS income
FROM items;         --income 列是一个计算字段
```
### 使用函数处理数据
常用的文本处理函数

| 函数名                     | 说明                                 |
|----------------------------|--------------------------------------|
| `LEFT()` （或使用子字符串函数）    | 返回字符串左边的字符                |
| `LENGTH()`（也可使用 `DATALENGTH()` 或 `LEN()`） | 返回字符串的长度                    |
| `LOWER()`                  | 将字符串转换为小写                  |
| `LTRIM()`                  | 去掉字符串左边的空格                |
| `RIGHT()`（或使用子字符串函数）   | 返回字符串右边的字符                |
| `RTRIM()`                  | 去掉字符串右边的空格                |
| `SUBSTR()` 或 `SUBSTRING()`       | 提取字符串的组成部分（见表 8-1）    |
| `SOUNDEX()`                | 返回字符串的 SOUNDEX 值             |
| `UPPER()`                  | 将字符串转换为大写                  |

常用日期与时间处理函数

| 函数名              | 说明                                   |
|---------------------|----------------------------------------|
| `CURRENT_DATE`      | 返回当前日期                           |
| `CURRENT_TIME`      | 返回当前时间                           |
| `CURRENT_TIMESTAMP` | 返回当前日期和时间（完整时间戳）       |
| `NOW()`             | 返回当前日期和时间                     |
| `GETDATE()`         | 返回当前系统日期和时间（SQL Server）   |
| `DATE()`            | 提取日期部分（MySQL）                 |
| `TIME()`            | 提取时间部分（MySQL）                 |
| `YEAR()`            | 提取年份                               |
| `MONTH()`           | 提取月份（1–12）                       |
| `DAY()`             | 提取“日”部分                           |
| `HOUR()`            | 提取小时部分                           |
| `MINUTE()`          | 提取分钟部分                           |
| `SECOND()`          | 提取秒数部分                           |
| `DAYOFWEEK()`       | 返回星期几（1=星期日，MySQL）         |
| `WEEK()`            | 返回一年中的第几周（MySQL）           |
| `DATE_ADD()`        | 将指定的时间间隔加到日期上（MySQL）   |
| `DATE_SUB()`        | 从日期中减去指定的时间间隔（MySQL）   |
| `DATEDIFF()`        | 返回两个日期之间的天数差               |
| `STR_TO_DATE()`     | 将字符串解析为日期格式（MySQL）       |
| `TO_CHAR()`         | 将日期格式化为字符串（PostgreSQL）    |
| `FORMAT()`          | 格式化日期或数字（SQL Server）        |
